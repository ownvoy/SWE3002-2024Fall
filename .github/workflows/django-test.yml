name: Django CI/CD TEST

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때 워크플로우 실행
  pull_request:
    branches:
      - master  # master 브랜치로의 PR에 대해 워크플로우 실행

jobs:
  # 테스트를 실행할 job
  test:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행

    strategy:
      matrix:
        python-version: [3.9]  # Python 3.9로만 실행

    services:
      mysql:
        image: mysql:8  # MySQL 8버전 이미지를 사용
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: swe3002  # 사용할 데이터베이스 이름
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=127.0.0.1 --password=1234"
          --health-timeout=5s
          --health-interval=10s
          --health-retries=5

    steps:
      # 저장소 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # Conda 설치
      - name: Install Conda
        run: |
          curl -sSL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
          bash miniconda.sh -b -f -p $HOME/miniconda
          source $HOME/miniconda/bin/activate
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH

      # Conda 환경 설치
      - name: Create and activate Python environment
        run: |
          conda env create -f environment.yml  # 환경 파일로 conda 환경 생성
          source activate djangoenv  # 생성한 환경을 활성화

      # MySQL 데이터베이스 구축
      - name: Set up MySQL database
        run: |
          until mysql -h 127.0.0.1 -u root -prootpassword -e "SELECT 1"; do
            echo "Waiting for MySQL to be ready..."
            sleep 3
          done
          mysql -h 127.0.0.1 -u root -prootpassword swe3002 < ./swe3002_dump.sql  # dump 파일로 DB 구축

      # 의존성 설치
      - name: Install Python dependencies
        run: |
          source activate djangoenv
          pip install -r requirements.txt  # 요구사항 파일에서 패키지 설치

      # 데이터베이스 마이그레이션
      - name: Run migrations
        run: |
          source activate djangoenv
          python manage.py migrate  # 데이터베이스 마이그레이션 실행

      # 테스트 실행
      - name: Run tests
        run: |
          source activate djangoenv
          python manage.py test  # 테스트 실행

      # 서버 실행 (옵션, 필요시만 사용)
      - name: Run server
        run: |
          source activate djangoenv
          python manage.py runserver 0.0.0.0:8000 &  # 서버 실행 (백그라운드에서 실행)
          sleep 10  # 서버 시작 대기
